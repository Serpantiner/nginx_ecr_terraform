#!/bin/bash

# Set the AWS region
REGION=us-west-2

# 1. Create ECR repository (Only create if it doesnt excist yet, I already have it and pushed the image there)
aws ecr create-repository --repository-name nginx --region $REGION

# 2. Authenticate Docker to ECR
aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$REGION.amazonaws.com

# 3. Create ECS cluster
aws ecs create-cluster --cluster-name new-nginx-cluster --region $REGION

# 4. Create IAM role for ECS task execution
aws iam create-role \
    --role-name ecsTaskExecutionRole \
    --assume-role-policy-document '{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
            }
        ]
    }' \
    --region $REGION

# 5. Attach necessary policies to the IAM role
aws iam attach-role-policy \
    --role-name ecsTaskExecutionRole \
    --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy \
    --region $REGION

aws iam attach-role-policy \
    --role-name ecsTaskExecutionRole \
    --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
    --region $REGION

# 6. Create a new VPC
REGION=us-west-2
echo "Using AWS Region: $REGION"

VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text --region $REGION)
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{\"Value\":true}" --region $REGION
echo "Created VPC: $VPC_ID"

# 7. Create an Internet Gateway
IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text --region $REGION)
aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID --region $REGION
echo "Created and attached Internet Gateway: $IGW_ID"

# 8. Create subnets
SUBNET_ID_1=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --availability-zone ${REGION}a --query 'Subnet.SubnetId' --output text --region $REGION)
SUBNET_ID_2=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.2.0/24 --availability-zone ${REGION}b --query 'Subnet.SubnetId' --output text --region $REGION)
echo "Created Subnets: $SUBNET_ID_1, $SUBNET_ID_2"

# 9. Create a route table
ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query 'RouteTable.RouteTableId' --output text --region $REGION)
echo "Created Route Table: $ROUTE_TABLE_ID"

# 10. Create a route to the Internet Gateway
aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID --region $REGION

# 11. Associate the route table with the subnets
aws ec2 associate-route-table --subnet-id $SUBNET_ID_1 --route-table-id $ROUTE_TABLE_ID --region $REGION
aws ec2 associate-route-table --subnet-id $SUBNET_ID_2 --route-table-id $ROUTE_TABLE_ID --region $REGION

# 12. Enable auto-assign public IP for the subnets
aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID_1 --map-public-ip-on-launch --region $REGION
aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID_2 --map-public-ip-on-launch --region $REGION

# 13. Create security group
SECURITY_GROUP_ID=$(aws ec2 create-security-group \
    --group-name nginx-sg \
    --description "Security group for Nginx ECS service" \
    --vpc-id $VPC_ID \
    --query 'GroupId' \
    --output text \
    --region $REGION)
echo "Created Security Group: $SECURITY_GROUP_ID"

# 14. Add inbound rule to the security group
aws ec2 authorize-security-group-ingress \
    --group-id $SECURITY_GROUP_ID \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/0 \
    --region $REGION

# 15. Enable Docker BuildKit
export DOCKER_BUILDKIT=1

# 16. Create a new builder instance
docker buildx create --use

# 17. Build and push the multi-arch image
docker buildx build --platform linux/amd64,linux/arm64 -t $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$REGION.amazonaws.com/nginx:latest --push .

# 18. Create task definition JSON file
cat <<EOT > task-def.json
{
    "family": "nginx-task",
    "networkMode": "awsvpc",
    "containerDefinitions": [
        {
            "name": "nginx-container",
            "image": "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$REGION.amazonaws.com/nginx:latest",
            "portMappings": [
                {
                    "containerPort": 80,
                    "hostPort": 80,
                    "protocol": "tcp"
                }
            ],
            "essential": true,
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/nginx-service",
                    "awslogs-region": "$REGION",
                    "awslogs-stream-prefix": "ecs"
                }
            }
        }
    ],
    "requiresCompatibilities": [
        "FARGATE"
    ],
    "cpu": "256",
    "memory": "512",
    "executionRoleArn": "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/ecsTaskExecutionRole"
}
EOT

# 19. Register the task definition
aws ecs register-task-definition --cli-input-json file://task-def.json --region $REGION

# 20. Create CloudWatch log group
aws logs create-log-group --log-group-name /ecs/nginx-service --region $REGION

# 21. Create ECS service
aws ecs create-service \
    --cluster new-nginx-cluster \
    --service-name nginx-service \
    --task-definition nginx-task \
    --desired-count 1 \
    --launch-type FARGATE \
    --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID_1,$SUBNET_ID_2],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
    --region $REGION

# 22. Wait for the service to stabilize
aws ecs wait services-stable --cluster new-nginx-cluster --services nginx-service --region $REGION

Get the TASK ARN
TASK_ARN=$(aws ecs list-tasks --cluster new-nginx-cluster --service-name nginx-service --query 'taskArns[0]' --output text --region $REGION) 

# Get the ENI ID 
ENI_ID=$(aws ecs describe-tasks --cluster new-nginx-cluster --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text --region $REGION) 
# Get the public IP 

PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text --region $REGION) echo "Your Nginx server is available at: http://$PUBLIC_IP"